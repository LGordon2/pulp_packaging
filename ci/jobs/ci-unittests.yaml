- parameter:
    name: pulp-unittest-parameters
    parameters:
        - string:
            name: PULP_GIT_PULP_BRANCH
            default: master
            description: |
                The branch of the Pulp platform to run the unit tests against.
        - string:
            name: PULP_GIT_PULP_REPOSITORY
            default: 'https://github.com/pulp/pulp.git'
            description: |
                The Git repository to use when pulling the branch.
        - string:
            name: PULP_GIT_NECTAR_BRANCH
            default: master
            description: |
                The branch of nectar to run the unit tests against.
        - string:
            name: PULP_GIT_GOFER_BRANCH
            default: master
            description: |
                The branch of gofer to run the unit tests against.
        - matrix-combinations:
            name: MATRIX_AXIS

- parameter:
    name: plugin-unittest-parameters
    parameters:
        - string:
            name: PULP_GIT_PLUGIN_BRANCH
            default: master
            description: |
                The branch of the Pulp plugin to run the unit tests against.
        - string:
            name: PULP_GIT_PULP_PLUGIN_REPOSITORY_BASE
            default: 'https://github.com/pulp'
            description: |
                The url for the git project to use repository to use when pulling the branch.

- builder:
    name: setup-pulp
    builders:
      - shell: |
            #!/bin/bash
            echo "Setting up after source control extract"
            env
            OS_NAME=$(lsb_release -si)
            OS_VERSION=$(lsb_release -sr | cut -f1 -d.)
            setenforce 0
            cd $WORKSPACE

            # Turn on tty for sudo I moved this to the instance configuration
            # sed -i 's|Defaults[ ]*requiretty|#Defaults    requiretty|g' /etc/sudoers
            set -x

            sudo yum -y install python-ctypes python-argparse
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ] && [ "$OS_VERSION" == "5" ]; then
              sudo pip install mock
              sudo yum -y install python-nose
              sudo pip install coverage==3.7
              sudo pip install nosexcover==1.0.8
            else
              sudo yum -y install  tito rpm-build python-mock  python-paste  python-lxml
              sudo pip install coverage nose nosexcover flake8 --upgrade
            fi

            # TODO Enable testing/beta
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ]; then
                sudo curl -o /etc/yum.repos.d/rhel-pulp.repo https://repos.fedorapeople.org/repos/pulp/pulp/rhel-pulp.repo
            else
                sudo curl -o /etc/yum.repos.d/fedora-pulp.repo https://repos.fedorapeople.org/repos/pulp/pulp/fedora-pulp.repo
            fi

            sudo yum -y install @pulp-server @pulp-admin @pulp-consumer
            sudo yum -y remove pulp-\* python-pulp\* gofer python-gofer

            service mongod restart
            service qpidd restart

            rm -rf $WORKSPACE/test
            mkdir -p $WORKSPACE/test
            rm -rf $WORKSPACE/coverage
            mkdir -p $WORKSPACE/coverage

            # sudo useradd pulp
            # sudo chown -R pulp:pulp $WORKSPACE

            # bash $WORKSPACE/pulp/playpen/ci/setup.sh

            OS_NAME=$(lsb_release -si)
            OS_VERSION=$(lsb_release -sr | cut -f1 -d.)
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ] && [ "$OS_VERSION" == "5" ]; then
                # don't install nectar on RHEL 5
                echo "Nectar is not installed on RHEL 5"
            else
              cd $WORKSPACE/nectar
              for setup in `find . -name setup.py`; do
                  pushd `dirname $setup`;
                  sudo python setup.py develop;
                  popd;
              done;
            fi
            echo "Setting up gofer"
            cd $WORKSPACE/gofer
            for setup in `find . -name setup.py`; do
                pushd `dirname $setup`;
                sudo python setup.py develop;
                popd;
            done;
            echo "Setting up pulp-server"
            cd $WORKSPACE/pulp
            for setup in `find . -name setup.py`; do
                pushd `dirname $setup`;
                sudo python setup.py develop;
                popd;
            done;
            sudo python ./pulp-dev.py -I

- job:
    name: 'unittest-pulp'
    project-type: matrix
    node: 'master'
    axes:
      - axis:
          type: label-expression
          name: node-type
          values:
            - f19-unittest
            - f20-unittest
            - rhel5-unittest
            - rhel6-unittest
            - rhel7-unittest
    parameters:
        - pulp-unittest-parameters
    scm:
        - git:
            url: $PULP_GIT_PULP_REPOSITORY
            branches:
                - origin/$PULP_GIT_PULP_BRANCH
            basedir: pulp
            skip-tag: True
        - git:
            url: 'https://github.com/pulp/nectar.git'
            branches:
                - origin/$PULP_GIT_NECTAR_BRANCH
            basedir: nectar
            skip-tag: True
        - git:
            url: 'https://github.com/jortel/gofer.git'
            branches:
                - origin/$PULP_GIT_GOFER_BRANCH
            basedir: gofer
            skip-tag: True
    wrappers:
      - jclouds:
          single-use: True
    builders:
        - setup-pulp
        - shell: |
            #!/bin/bash
            echo "Running core pulp tests"
            # Running the core tests should be an independent job
            cd $WORKSPACE/pulp
            export PYTHONUNBUFFERED=1
            set -x
            python ./run-tests.py --enable-coverage --with-xunit --xunit-file ../test/pulp_test.xml --with-xcoverage --xcoverage-file ../coverage/pulp_coverage.xml

    publishers:
      - cobertura:
          report-file: 'coverage/*.xml'
          fail-no-reports: true
          targets:
            - lines:
                healthy: 84
                unhealthy: 0.0
                failing: 0.0
      # Publish a pretty graph of the test results
      - junit:
          results: 'test/*.xml'
          keep-long-stdio: true
          test-stability: true
      # Archive the test results
      - archive:
          artifacts: 'test/**'
          allow-empty: 'true'


- job-template:
    name: 'unittest-{pulp_plugin}'
    project-type: matrix
    node: 'master'
    axes:
      - axis:
          type: label-expression
          name: node-type
          values: '{obj:unittest_platforms}'
    parameters:
        - pulp-unittest-parameters
        - plugin-unittest-parameters
    scm:
        - git:
            url: $PULP_GIT_PULP_REPOSITORY
            branches:
                - origin/$PULP_GIT_PULP_BRANCH
            basedir: pulp
            skip-tag: True
        - git:
            url: $PULP_GIT_PULP_PLUGIN_REPOSITORY_BASE/{pulp_plugin}.git
            branches:
                - origin/$PULP_GIT_PLUGIN_BRANCH
            basedir: '{pulp_plugin}'
            skip-tag: True
        - git:
            url: 'https://github.com/pulp/nectar.git'
            branches:
                - origin/$PULP_GIT_NECTAR_BRANCH
            basedir: nectar
            skip-tag: True
        - git:
            url: 'https://github.com/jortel/gofer.git'
            branches:
                - origin/$PULP_GIT_GOFER_BRANCH
            basedir: gofer
            skip-tag: True
    wrappers:
      - jclouds:
          single-use: True
    builders:
        - setup-pulp
        - shell: |
            #!/bin/bash
            echo "Setting up the plugin"

            cd $WORKSPACE/{pulp_plugin}
            for setup in `find . -name setup.py`; do
                pushd `dirname $setup`;
                sudo python setup.py develop;
                popd;
            done;
            sudo python ./pulp-dev.py -I

            echo "Running plugin tests"
            cd $WORKSPACE/{pulp_plugin}
            export PYTHONUNBUFFERED=1
            set -x
            python ./run-tests.py --enable-coverage --with-xunit --xunit-file ../test/pulp_test.xml --with-xcoverage --xcoverage-file ../coverage/pulp_coverage.xml

    publishers:
      - cobertura:
          report-file: 'coverage/*.xml'
          fail-no-reports: true
          targets:
            - lines:
                healthy: {min_coverage}
                unhealthy: 0.0
                failing: 0.0
      # Publish a pretty graph of the test results
      - junit:
          results: 'test/*.xml'
          keep-long-stdio: true
          test-stability: true
      # Archive the test results
      - archive:
          artifacts: 'test/**'
          allow-empty: 'true'

- job-group:
    name: 'unittest-jobs'
    jobs:
      - 'unittest-{pulp_plugin}'

- project:
    name: unit-tests
    jobs:
     - 'unittest-jobs'
    pulp_plugin:
     - pulp_rpm:
        min_coverage: 87.0
        unittest_platforms:
        - f19-unittest
        - f20-unittest
        - rhel5-unittest
        - rhel6-unittest
        - rhel7-unittest
     - pulp_puppet:
        min_coverage: 80.0
        unittest_platforms:
        - f19-unittest
        - f20-unittest
        - rhel5-unittest
        - rhel6-unittest
        - rhel7-unittest
     - pulp_docker:
        min_coverage: 100.0
        unittest_platforms:
        - f19-unittest
        - f20-unittest
        - rhel6-unittest
        - rhel7-unittest
     - pulp_ostree:
        min_coverage: 100.0
        unittest_platforms:
        - f19-unittest
        - f20-unittest
        - rhel6-unittest
        - rhel7-unittest
#     - pulp_deb:
#        min_coverage: 100.0
